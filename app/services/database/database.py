import logging
import os
from typing import AsyncGenerator

from sqlalchemy.ext.asyncio import AsyncEngine
from sqlalchemy.orm import sessionmaker
from sqlmodel import SQLModel, create_engine, Field
from sqlmodel.ext.asyncio.session import AsyncSession

from app.services.database import models

logger = logging.getLogger(__name__)

# --- Configura√ß√£o do Banco de Dados ---
# 'sqlite+aiosqlite' para suporte ass√≠ncrono com SQLite
SQLITE_PATH = os.getenv('SQLITE_PATH', 'pynewsdb.db') # Valor padr√£o se n√£o definida
SQLITE_URL = os.getenv('SQLITE_URL', f'sqlite+aiosqlite:///{SQLITE_PATH}')

DATABASE_FILE = SQLITE_PATH # Usamos SQLITE_PATH para o nome do arquivo
DATABASE_URL = SQLITE_URL # Usamos SQLITE_URL para a URL completa

# Cria o motor ass√≠ncrono 
engine: AsyncEngine = AsyncEngine(create_engine(DATABASE_URL, echo=True, future=True))

# --- F√°brica de Sess√µes Ass√≠ncronas ---
# Crie a f√°brica de sess√µes UMA VEZ no escopo global do m√≥dulo.
# Esta √© a vari√°vel √© injetada para obter sess√µes nas chamadas. 
AsyncSessionLocal = sessionmaker(
    engine, class_=AsyncSession, expire_on_commit=False # expire_on_commit=False √© importante!
)

# --- Modelo de Teste Tempor√°rio (SQLModel) ---
class TestEntry(SQLModel, table=True): # table=True indica que esta classe √© um modelo de tabela
    """
    Classe de modelo tempor√°ria para testes de conex√£o com o banco de dados.
    Ser√° usada como uma solu√ß√£o provis√≥ria antes da implementa√ß√£o dos modelos finais do projeto.
    """
    __tablename__ = "test_entries"
    id: int | None = Field(default=None, primary_key=True)
    message: str

    def __repr__(self):
        return f"<TestEntry(id={self.id}, message='{self.message}')>"
    

# --- Fun√ß√µes de Inicializa√ß√£o e Sess√£o do Banco de Dados ---        
async def init_db():
    """
    Inicializa o banco de dados:
    1. Cria todas as tabelas definidas (caso n√£o existam).
    2. Insere o usu√°rio de teste 'alice' via seeder, se necess√°rio.
    """
    logger.info("Inicializando banco de dados...")

    # ‚úÖ Importa os models para registrar no SQLModel.metadata
    from app.services.database.model import community_model  # importa o m√≥dulo inteiro, n√£o s√≥ a classe

    # üîß Garante que todas as tabelas (incluindo 'community') sejam criadas, se n√£o existirem
    async with engine.begin() as conn:
        await conn.run_sync(SQLModel.metadata.create_all)

    logger.info("Tabelas do banco de dados verificadas/criadas com sucesso.")

    # ‚úÖ Executa o seeder para inserir o usu√°rio 'alice', se necess√°rio
    from app.services.database.seeder import insert_test_community
    await insert_test_community()


async def get_session() -> AsyncGenerator[AsyncSession, None]:
    """
    Fun√ß√£o utilit√°ria que fornece uma sess√£o de banco de dados ass√≠ncrona.
    Inje√ß√£o de depend√™ncia no app no lifespan. 
    """
    async with AsyncSessionLocal() as session:
        yield session
    # chamada do session.close() acontece ao final do bloco async with(). 
